// <auto-generated />
using System;
using EFramework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFrameWork.Migrations
{
    [DbContext(typeof(AGWDbContext))]
    partial class AGWDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFrameWork.Model.Task", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Estimation")
                        .HasColumnType("real");

                    b.Property<float?>("NumUser")
                        .HasColumnType("real");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskID");

                    b.HasIndex("StatusID");

                    b.HasIndex("TeamID");

                    b.ToTable("TaskTables");
                });

            modelBuilder.Entity("EFrameWork.Model.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"));

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamID");

                    b.ToTable("TeamTables");
                });

            modelBuilder.Entity("EFrameWork.Model.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.HasIndex("TeamID");

                    b.ToTable("UserTables");
                });

            modelBuilder.Entity("EFrameWork.Model.UserToTask", b =>
                {
                    b.Property<int>("UserToTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserToTaskID"));

                    b.Property<int>("TaskID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserToTaskID");

                    b.HasIndex("TaskID");

                    b.HasIndex("UserID");

                    b.ToTable("UserToTaskTables");
                });

            modelBuilder.Entity("Model.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Role");

                    b.HasKey("RoleID");

                    b.ToTable("RoleTables");
                });

            modelBuilder.Entity("Model.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<int>("StatusOption")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("StatusID");

                    b.ToTable("StatusTables");
                });

            modelBuilder.Entity("EFrameWork.Model.Task", b =>
                {
                    b.HasOne("Model.Status", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFrameWork.Model.Team", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EFrameWork.Model.User", b =>
                {
                    b.HasOne("Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFrameWork.Model.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EFrameWork.Model.UserToTask", b =>
                {
                    b.HasOne("EFrameWork.Model.Task", "Task")
                        .WithMany("UserAssignments")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFrameWork.Model.User", "User")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFrameWork.Model.Task", b =>
                {
                    b.Navigation("UserAssignments");
                });

            modelBuilder.Entity("EFrameWork.Model.Team", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EFrameWork.Model.User", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Model.Status", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
